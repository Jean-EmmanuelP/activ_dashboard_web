import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { GoogleGenAI } from '@google/genai';

// Initialize Vertex with your Cloud project and location
const ai = new GoogleGenAI({
	vertexai: true,
	project: 'serious-mariner-425213-a1',
	location: 'global'
});

const model = 'gemini-2.5-flash-lite';

// Set up generation config
const generationConfig = {
	maxOutputTokens: 65535,
	temperature: 1,
	topP: 0.95,
	safetySettings: [
		{
			category: 'HARM_CATEGORY_HATE_SPEECH',
			threshold: 'OFF',
		},
		{
			category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
			threshold: 'OFF',
		},
		{
			category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
			threshold: 'OFF',
		},
		{
			category: 'HARM_CATEGORY_HARASSMENT',
			threshold: 'OFF',
		}
	],
};

export const POST: RequestHandler = async ({ request }) => {
	console.log('üöÄ API Endpoint called');
	console.log('üìç Environment check:');
	console.log('  - GOOGLE_APPLICATION_CREDENTIALS:', process.env.GOOGLE_APPLICATION_CREDENTIALS);
	console.log('  - NODE_ENV:', process.env.NODE_ENV);
	
	try {
		const { answers } = await request.json();
		console.log(`üìä Received ${answers.length} answers`);
		
		// Format answers data
		const formattedAnswers: Record<string, any> = {};
		answers.forEach((answer: any) => {
			const question = answer.question;
			if (question) {
				formattedAnswers[question.id] = {
					question_id: question.id,
					question_text: question.text,
					question_type: question.type,
					answer: answer.value,
					section_id: question.section_id,
					parent_id: question.parent_id,
					is_required: question.is_required
				};
			}
		});

		const submissionData = {
			submission_id: crypto.randomUUID(),
			secure_key: crypto.randomUUID(),
			submitted_at: new Date().toISOString(),
			answers_count: answers.length,
			answers: formattedAnswers
		};

		const promptText = `Vous √™tes un expert en sant√© et activit√© physique, charg√© de g√©n√©rer une prescription personnalis√©e bas√©e sur les r√©ponses d'un patient √† un questionnaire m√©dical. Utilisez les donn√©es fournies dans le JSON ci-dessous pour analyser l'√©tat de sant√©, l'activit√© physique actuelle, les motivations, et les objectifs du patient. Fournissez une r√©ponse structur√©e en fran√ßais avec un ton empathique et professionnel, en utilisant des emojis pour les sections. Adaptez les recommandations aux pathologies, activit√©s, et motivations du patient.

### Donn√©es du Patient (JSON de soumission) :
${JSON.stringify(submissionData, null, 2)}

### Instructions :
- Analysez les r√©ponses pour personnaliser la sortie.
- Ignorer les champs absents sauf si pertinents.
- Fournissez une sortie structur√©e selon le sch√©ma JSON ci-dessous.

### Sch√©ma de Sortie Structur√©e (JSON) :
{
  "conseils": {
    "type": "array",
    "items": {
      "type": "string"
    },
    "description": "Dix conseils pratiques personnalis√©s, avec emojis, bas√©s sur les r√©ponses du patient."
  },
  "objectifs": {
    "type": "array",
    "items": {
      "type": "string"
    },
    "description": "Cinq objectifs personnalis√©s pour le patient."
  },
  "benefices": {
    "type": "array",
    "items": {
      "type": "string"
    },
    "description": "B√©n√©fices attendus personnalis√©s."
  },
  "programme_perso": {
    "type": "object",
    "properties": {
      "endurance": {
        "type": "string",
        "description": "D√©tails sur l'endurance."
      },
      "renforcement": {
        "type": "string",
        "description": "D√©tails sur le renforcement musculaire."
      },
      "etirements": {
        "type": "string",
        "description": "D√©tails sur les √©tirements."
      },
      "equilibre": {
        "type": "string",
        "description": "D√©tails sur l'√©quilibre si applicable."
      }
    },
    "required": ["endurance", "renforcement", "etirements"],
    "description": "Programme personnalis√© indicatif, adapt√© aux r√©ponses."
  },
  "planification": {
    "type": "string",
    "description": "Exemple de planning hebdomadaire (max 5 s√©ances)."
  },
  "orientation": {
    "type": "array",
    "items": {
      "type": "string"
    },
    "description": "Suggestions d'orientation vers professionnels ou structures."
  },
  "disclaimer": {
    "type": "string",
    "description": "Disclaimer final obligatoire : ü©∫ Ces conseils ne remplacent pas un avis m√©dical. Ils doivent √™tre valid√©s par un professionnel de sant√©."
  }
}`;

		const req = {
			model: model,
			contents: [{
				parts: [{
					text: promptText
				}]
			}],
			config: generationConfig,
		};

		console.log('ü§ñ Calling Vertex AI with model:', model);
		const streamingResp = await ai.models.generateContentStream(req);
		console.log('‚úÖ Vertex AI stream started');
		let fullResponse = '';
		
		for await (const chunk of streamingResp) {
			if (chunk.text) {
				fullResponse += chunk.text;
			}
		}

		// Parse the response
		try {
			// Clean the response - remove markdown code blocks if present
			const cleanedResponse = fullResponse
				.replace(/```json\n?/g, '')
				.replace(/```\n?/g, '')
				.trim();
			
			// Find JSON in the response
			const jsonMatch = cleanedResponse.match(/\{[\s\S]*\}/);
			if (!jsonMatch) {
				throw new Error('No valid JSON found in response');
			}
			
			const parsed = JSON.parse(jsonMatch[0]);
			
			// Ensure all required fields
			if (!parsed.disclaimer) {
				parsed.disclaimer = "ü©∫ Ces conseils ne remplacent pas un avis m√©dical. Ils doivent √™tre valid√©s par un professionnel de sant√© avant application.";
			}
			
			console.log('‚úÖ Successfully parsed AI response');
			return json(parsed);
		} catch (parseError) {
			console.error('Error parsing AI response:', parseError);
			console.log('Raw response:', fullResponse);
			
			// Return default recommendations
			return json(getDefaultRecommendations());
		}
	} catch (error) {
		console.error('‚ùå Error in API endpoint:', error);
		console.error('Error details:', {
			name: error.name,
			message: error.message,
			stack: error.stack
		});
		console.log('‚ö†Ô∏è Returning default recommendations');
		return json(getDefaultRecommendations(), { status: 500 });
	}
};

function getDefaultRecommendations() {
	return {
		conseils: [
			"üö∂ Commencer par des activit√©s douces comme la marche 30 min/jour",
			"üíß Maintenir une hydratation ad√©quate (1.5-2L d'eau par jour)",
			"üìà Augmenter progressivement l'intensit√© sur 4 semaines",
			"üîÑ Maintenir une r√©gularit√© dans la pratique (minimum 3x/semaine)",
			"üçé Adapter l'alimentation √† l'activit√© physique",
			"üò¥ Respecter les temps de r√©cup√©ration entre les s√©ances",
			"üìù Tenir un journal de progression",
			"üë• Envisager des activit√©s en groupe pour la motivation",
			"üéØ Se fixer des objectifs r√©alistes et progressifs",
			"ü©∫ Consulter r√©guli√®rement pour un suivi m√©dical"
		],
		objectifs: [
			"Am√©liorer la condition cardiovasculaire en 3 mois",
			"Renforcer la masse musculaire de fa√ßon progressive",
			"R√©duire le stress quotidien par l'activit√© physique",
			"Am√©liorer la qualit√© de sommeil",
			"Maintenir un poids sant√© sur le long terme"
		],
		benefices: [
			"R√©duction du risque cardiovasculaire de 30%",
			"Am√©lioration de la qualit√© de sommeil",
			"Augmentation de l'√©nergie quotidienne",
			"Meilleure r√©gulation de la glyc√©mie",
			"Renforcement du syst√®me immunitaire",
			"Am√©lioration de l'humeur et r√©duction de l'anxi√©t√©",
			"Augmentation de la densit√© osseuse"
		],
		programme_perso: {
			endurance: "3 s√©ances de 30-45 minutes par semaine d'activit√© a√©robie mod√©r√©e",
			renforcement: "2 s√©ances de 20-30 minutes ciblant tous les groupes musculaires",
			etirements: "10-15 minutes d'√©tirements apr√®s chaque s√©ance",
			equilibre: "Exercices d'√©quilibre 2 fois par semaine si n√©cessaire"
		},
		planification: "Lundi: Cardio l√©ger 30min | Mercredi: Renforcement 30min | Vendredi: Activit√© mixte 45min | Weekend: Activit√© r√©cr√©ative",
		orientation: [
			"Consultation avec un kin√©sith√©rapeute pour programme personnalis√©",
			"Suivi m√©dical r√©gulier tous les 3 mois",
			"Possibilit√© de rejoindre un club sportif adapt√©"
		],
		disclaimer: "ü©∫ Ces conseils ne remplacent pas un avis m√©dical. Ils doivent √™tre valid√©s par un professionnel de sant√© avant application."
	};
}